#!/usr/bin/perl

# vmsgs 3 - A redesign of an improvement for a drop-in replacement for Kees' cool
# clone of msgs(1).
#
# Copyright Anthony Brummett 29 Sep 2005

#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# Command line options
# -m <#>: start reading at the given msg number.  You can also say -10 to start
#         at 10 behind your current msg pointer, or +4 to start at 4 ahead
# -k: Ignore your killfile for this session
# -h <host>: Specify that you're reading remotely and what host we should read
#            from.  If <host> is blank, use the default host
# -r respond to the last msg
# -s post a new messages
# -c <size>: Specify the cache size
# -C: Immediately catch up 
# -U <days>: Mark the last <days> days of messages as unread
# -t: Use the text (msgs-clone) interface
# -x: Use the Tk (X11) interface
# If neither -t or x are specified, it uses the default Curses interface

use Getopt::Std;

use lib "/home/tony/vmsgs-3.2";
use lib "/usr/local/lib";  # for msgs.pl
#use ExtUtils::testlib;
use Vmsgs;
use Vmsgs::MsgsInterface;
use Vmsgs::MsgsRules;

use strict;

#END {
#  if (-f ".vmsgs.stderr") {
#    print STDOUT "While running, vmsgs detected the following errors:\n";
#    open(F,".vmsgs.stderr");
#    while(<F>) {
#      print;
#    }
#    close(F);
##    unlink(".vmsgs.stderr");
#  }
#} # end END
      
  

our $DEBUG = 0;
our $VERSION = $Vmsgs::VERSION;
# Command line flags
our($opt_m,$opt_k, $opt_s, $opt_c, $opt_C, $opt_U, $opt_t, $opt_x, $opt_h, $opt_r);


my $state = &Init();

# Interface->Init() should queue the first event for the SyncEventHandler
print "Interface object is ",$state->{'interface'},"\n" if ($DEBUG);

open(STDERR,">.vmsgs.stderr");  # Write all errors to this file instead of clutterin up the screen

# Dosen't return until the interface exits
$state->{'interface'}->Init($state);

$state->{'interface'}->Shutdown();

print "vmsgs done\n";
exit(0);



# Handles the high priority event queue
# A bunch of startup stuff
sub Init {
  my($state,$interfacepkg);

  foreach (@ARGV) {
    if ($_ eq "--help") {
      &DoCommandLineHelp();
      exit(0);
    }
  }
  getopts('m:ksc:CUtxh:r');

  $state->{'msgs'} = new Vmsgs::MsgsInterface('host'=>$opt_h, 'cachesize'=>$opt_c);
  $state->{'msgs'}->SetArg0Client("vmsgs");

  if ($opt_C) {
    print "Catching up...\n";
    $state->{'msgs'}->SetRC($state->{'msgs'}->lastmsg());
    exit(0);
  }

  if ($opt_U) {
    &UnReadMsgs($opt_U);
    exit(0);
  }

  if ($opt_m) {
    $state->{'msgs'}->currmsg($opt_m);
  }

  &SetupSignals();
  $state->{'msgs'}->SetArg0Tagline(&PickArgv0());
  umask(022);

  $state->{'editor'} = $ENV{'MSGS_EDITOR'} || $ENV{'EDITOR'} || "vi";  # vi is cooler anyway
#  if (! -x $state->{'editor'}) {
#    $state->{'editor'} = "vi";
#  }

  print "editor is ",$state->{'editor'},"\n" if ($DEBUG);
  $state->{'rules'} = new Vmsgs::MsgsRules(skip => $opt_k);

  if ($state->{'msgs'}->lastmsg() < $state->{'msgs'}->currmsg()) {
    $state->{'msgs'}->currmsg($state->{'msgs'}->lastmsg());
    $state->{'msgs'}->setread($state->{'msgs'}->currmsg());
  }

  if ($opt_t) {
    $interfacepkg = "Vmsgs::TextInterface";
  } elsif ($opt_x) {
    $interfacepkg = "Vmsgs::TkInterface";
  } else {
    $interfacepkg = "Vmsgs::CursesInterface";
  }
  eval "use $interfacepkg;";
  if ($@) {
    print "Cannot start up user interface: $@\n";
    exit(1);
  }
  $state->{'interface'} = new $interfacepkg($state);

  print "interface object is ",$state->{'interface'},"\n" if ($DEBUG);

  $state;
}


sub UnReadMsgs {
my($days) = @_;

  print "Not supported yet\n";
}


sub DoCommandLineHelp {

  print "Command Line Options for vmsgs:
-m #      Start reading at this msg ID.  You can also say -# to start that many
          before the current one, or +# to start that many after
-k        Ignore your .msgsrules file for this session
-h [host] Read remotely from the given host.  If you don't specify a host, then
          the default one will be used
-r        respond to the last msg you read
-s        post a new message
-c #      Specify the cache size
-C        Catch up to all unread messages
-U #      Mark the last number of day's msgs as unread
-t        Use the text interface
-x        Use the Tk interface
";
} # end DoCommandLineHelp


# Sets up the non-interface-dependant signals
sub SetupSignals {

  $SIG{'HUP'}=\&SigTerminate;
  $SIG{'INT'}=\&SigTerminate;
  $SIG{'TERM'}=\&SigTerminate;
}


# Called when there's a signal that we should terminate
sub SigTerminate {
  exit(0);
}
  


# The witty saying generator
sub PickArgv0 {
  my @argvs = ("superfly tnt","gutter trash","likes cake",
        "kooler than jesus","new wave","get some!",
        "better than a sharp stick in the eye",
        "                      nosey, aint ya?","the cool one");

  my $filename = $ENV{'HOME'} . "/.msgsrand";

  srand();

  if (-f $filename ) {
    @argvs = ();
    open(FILE,$filename);
    while(<FILE>) {
      chomp;
      next unless (m/\S/);  # make sure this isn't a blank line
      push(@argvs,$_);
    }
    close(FILE);
  }

  $argvs[ int(rand($#argvs+1)) ];
  
} # end PickArgv0

